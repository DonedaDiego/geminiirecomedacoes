#!/usr/bin/env python3
"""
Teste Espec√≠fico - Inser√ß√£o de Ativos Portfolio
Replica exatamente o que a API /api/admin/portfolio/add-asset faz
"""

import os
import psycopg2
from psycopg2.extras import RealDictCursor
import json
from datetime import datetime

def test_exact_api_flow():
    """Testar exatamente o fluxo da API que est√° falhando"""
    
    print("üß™ TESTANDO FLUXO EXATO DA API add-asset")
    print("=" * 50)
    
    # Conectar exatamente como o database.py faz
    try:
        database_url = os.environ.get("DATABASE_URL")
        
        if database_url:
            conn = psycopg2.connect(database_url, sslmode='require')
            print("‚úÖ Conectado via DATABASE_URL")
        else:
            conn = psycopg2.connect(
                host=os.environ.get("DB_HOST", "localhost"),
                database=os.environ.get("DB_NAME", "postgres"),
                user=os.environ.get("DB_USER", "postgres"),
                password=os.environ.get("DB_PASSWORD", "#geminii"),
                port=os.environ.get("DB_PORT", "5432")
            )
            print("‚úÖ Conectado via vari√°veis locais")
            
    except Exception as e:
        print(f"‚ùå ERRO DE CONEX√ÉO: {e}")
        return False
    
    cursor = conn.cursor()
    
    # Dados de teste exatamente como vem do frontend
    test_data = {
        'portfolio': 'smart_bdr',
        'ticker': 'WEGE3',
        'weight': 25.0,
        'sector': 'Industrial',
        'entry_price': 35.50,
        'current_price': 42.30,  # Pode ser None
        'target_price': 50.00,
        'entry_date': '2024-01-15'
    }
    
    print(f"üìã Dados de teste: {json.dumps(test_data, indent=2)}")
    
    try:
        # PASSO 1: Verificar se portfolio existe (como deveria ser)
        print("\nüîç PASSO 1: Verificando portfolio...")
        cursor.execute("SELECT name, display_name FROM portfolios WHERE name = %s", (test_data['portfolio'],))
        portfolio = cursor.fetchone()
        
        if portfolio:
            print(f"‚úÖ Portfolio encontrado: {portfolio[1]}")
        else:
            print(f"‚ö†Ô∏è Portfolio '{test_data['portfolio']}' n√£o encontrado!")
            # Criar portfolio para teste
            cursor.execute("""
                INSERT INTO portfolios (name, display_name, description, is_active)
                VALUES (%s, %s, %s, %s)
                ON CONFLICT (name) DO NOTHING
            """, (test_data['portfolio'], test_data['portfolio'].title(), 'Portfolio de teste', True))
            print("‚úÖ Portfolio de teste criado")
        
        # PASSO 2: Verificar se ativo j√° existe
        print("\nüîç PASSO 2: Verificando se ativo j√° existe...")
        cursor.execute("""
            SELECT id FROM portfolio_assets 
            WHERE portfolio_name = %s AND ticker = %s
        """, (test_data['portfolio'], test_data['ticker']))
        
        existing = cursor.fetchone()
        if existing:
            print(f"‚ö†Ô∏è Ativo {test_data['ticker']} j√° existe (ID: {existing[0]})")
            # Remover para o teste
            cursor.execute("DELETE FROM portfolio_assets WHERE id = %s", (existing[0],))
            print("üóëÔ∏è Ativo removido para o teste")
        else:
            print(f"‚úÖ Ativo {test_data['ticker']} n√£o existe - pode inserir")
        
        # PASSO 3: Inser√ß√£o (exatamente como na API)
        print("\nüíæ PASSO 3: Executando INSERT...")
        
        sql_query = """
            INSERT INTO portfolio_assets 
            (portfolio_name, ticker, weight, sector, entry_price, current_price, target_price, entry_date)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            RETURNING id
        """
        
        values = (
            test_data['portfolio'],
            test_data['ticker'],
            float(test_data['weight']),
            test_data['sector'],
            float(test_data['entry_price']),
            float(test_data['current_price']) if test_data['current_price'] else None,
            float(test_data['target_price']),
            test_data['entry_date']
        )
        
        print(f"üìù SQL: {sql_query}")
        print(f"üìä Valores: {values}")
        
        cursor.execute(sql_query, values)
        asset_id = cursor.fetchone()[0]
        
        print(f"‚úÖ INSERT executado! ID retornado: {asset_id}")
        
        # PASSO 4: Commit (cr√≠tico!)
        print("\nüíæ PASSO 4: Executando COMMIT...")
        conn.commit()
        print("‚úÖ COMMIT executado com sucesso!")
        
        # PASSO 5: Verificar se realmente foi salvo
        print("\nüîç PASSO 5: Verificando se foi salvo...")
        cursor.execute("""
            SELECT id, ticker, weight, sector, entry_price, current_price, target_price, entry_date
            FROM portfolio_assets 
            WHERE id = %s
        """, (asset_id,))
        
        saved_asset = cursor.fetchone()
        if saved_asset:
            print("‚úÖ Ativo encontrado no banco:")
            print(f"   ID: {saved_asset[0]}")
            print(f"   Ticker: {saved_asset[1]}")
            print(f"   Peso: {saved_asset[2]}%")
            print(f"   Setor: {saved_asset[3]}")
            print(f"   Pre√ßo Entrada: R$ {saved_asset[4]}")
            print(f"   Pre√ßo Atual: R$ {saved_asset[5] or 'N/A'}")
            print(f"   Pre√ßo Alvo: R$ {saved_asset[6]}")
            print(f"   Data: {saved_asset[7]}")
        else:
            print("‚ùå ERRO: Ativo n√£o encontrado ap√≥s commit!")
            return False
        
        # PASSO 6: Simular response da API
        print("\nüì§ PASSO 6: Simulando response da API...")
        
        api_response = {
            'success': True,
            'message': f'Ativo {test_data["ticker"]} adicionado √† carteira {test_data["portfolio"]} com sucesso!'
        }
        
        print(f"üì® Response: {json.dumps(api_response, indent=2)}")
        
        # LIMPEZA: Remover ativo de teste
        print("\nüßπ LIMPEZA: Removendo ativo de teste...")
        cursor.execute("DELETE FROM portfolio_assets WHERE id = %s", (asset_id,))
        conn.commit()
        print("‚úÖ Ativo de teste removido")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERRO durante o teste: {e}")
        print(f"üîç Tipo do erro: {type(e).__name__}")
        
        # Tentar rollback
        try:
            conn.rollback()
            print("üîÑ Rollback executado")
        except:
            pass
            
        return False
        
    finally:
        cursor.close()
        conn.close()
        print("\nüîå Conex√£o fechada")

def test_recommendations_table():
    """Testar se n√£o h√° conflito com tabela de recomenda√ß√µes"""
    
    print("\nüîç TESTANDO TABELA DE RECOMENDA√á√ïES...")
    print("=" * 50)
    
    try:
        database_url = os.environ.get("DATABASE_URL")
        
        if database_url:
            conn = psycopg2.connect(database_url, sslmode='require')
        else:
            conn = psycopg2.connect(
                host=os.environ.get("DB_HOST", "localhost"),
                database=os.environ.get("DB_NAME", "postgres"),
                user=os.environ.get("DB_USER", "postgres"),
                password=os.environ.get("DB_PASSWORD", "#geminii"),
                port=os.environ.get("DB_PORT", "5432")
            )
            
        cursor = conn.cursor()
        
        # Verificar tabelas de recomenda√ß√µes
        tables_to_check = [
            'portfolio_recommendations',
            'recommendations_free', 
            'recommendations'
        ]
        
        for table in tables_to_check:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                print(f"‚úÖ {table}: {count} registros")
                
                # Ver estrutura
                cursor.execute(f"""
                    SELECT column_name 
                    FROM information_schema.columns 
                    WHERE table_name = '{table}'
                    ORDER BY ordinal_position
                """)
                columns = [row[0] for row in cursor.fetchall()]
                print(f"   Colunas: {', '.join(columns)}")
                
            except Exception as e:
                print(f"‚ùå {table}: N√£o existe ou erro - {e}")
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erro ao testar recomenda√ß√µes: {e}")

def test_connection_persistence():
    """Testar se conex√£o persiste durante toda opera√ß√£o"""
    
    print("\nüîç TESTANDO PERSIST√äNCIA DA CONEX√ÉO...")
    print("=" * 50)
    
    try:
        database_url = os.environ.get("DATABASE_URL")
        
        if database_url:
            conn = psycopg2.connect(database_url, sslmode='require')
        else:
            conn = psycopg2.connect(
                host=os.environ.get("DB_HOST", "localhost"),
                database=os.environ.get("DB_NAME", "postgres"),
                user=os.environ.get("DB_USER", "postgres"),
                password=os.environ.get("DB_PASSWORD", "#geminii"),
                port=os.environ.get("DB_PORT", "5432")
            )
            
        print("‚úÖ Conex√£o estabelecida")
        
        cursor = conn.cursor()
        
        # Teste 1: Query simples
        cursor.execute("SELECT 1")
        result = cursor.fetchone()[0]
        print(f"‚úÖ Query b√°sica: {result}")
        
        # Teste 2: Query com par√¢metros
        cursor.execute("SELECT %s as test", ("test_param",))
        result = cursor.fetchone()[0]
        print(f"‚úÖ Query com par√¢metros: {result}")
        
        # Teste 3: BEGIN/COMMIT
        cursor.execute("BEGIN")
        print("‚úÖ BEGIN executado")
        
        cursor.execute("SELECT 1")
        cursor.fetchone()
        print("‚úÖ Query dentro da transa√ß√£o")
        
        cursor.execute("COMMIT")
        print("‚úÖ COMMIT executado")
        
        # Teste 4: Verificar status da conex√£o
        print(f"üìä Status da conex√£o: {conn.status}")
        print(f"üìä Closed: {conn.closed}")
        print(f"üìä Encoding: {conn.encoding}")
        
        cursor.close()
        conn.close()
        
        print("‚úÖ Todos os testes de conex√£o passaram!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na persist√™ncia da conex√£o: {e}")
        return False

def check_api_error_patterns():
    """Verificar padr√µes comuns de erro na API"""
    
    print("\nüîç VERIFICANDO PADR√ïES DE ERRO NA API...")
    print("=" * 50)
    
    # Verificar problemas comuns
    issues = []
    
    # 1. Verificar se todas as vari√°veis de ambiente est√£o definidas
    env_vars = ['DATABASE_URL', 'DB_HOST', 'DB_NAME', 'DB_USER', 'DB_PASSWORD', 'DB_PORT']
    missing_vars = []
    
    for var in env_vars:
        if not os.environ.get(var):
            missing_vars.append(var)
    
    if os.environ.get('DATABASE_URL'):
        print("‚úÖ DATABASE_URL definida (Railway)")
    elif missing_vars:
        print(f"‚ö†Ô∏è Vari√°veis de ambiente faltando: {missing_vars}")
        issues.append("Vari√°veis de ambiente n√£o configuradas")
    else:
        print("‚úÖ Vari√°veis de ambiente locais definidas")
    
    # 2. Verificar se as tabelas realmente existem
    try:
        database_url = os.environ.get("DATABASE_URL")
        
        if database_url:
            conn = psycopg2.connect(database_url, sslmode='require')
        else:
            conn = psycopg2.connect(
                host=os.environ.get("DB_HOST", "localhost"),
                database=os.environ.get("DB_NAME", "postgres"),
                user=os.environ.get("DB_USER", "postgres"),
                password=os.environ.get("DB_PASSWORD", "#geminii"),
                port=os.environ.get("DB_PORT", "5432")
            )
            
        cursor = conn.cursor()
        
        # Verificar tabela portfolio_assets
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_name = 'portfolio_assets'
        """)
        
        if cursor.fetchone():
            print("‚úÖ Tabela portfolio_assets existe")
        else:
            print("‚ùå Tabela portfolio_assets N√ÉO existe!")
            issues.append("Tabela portfolio_assets n√£o existe")
        
        # Verificar estrutura da tabela
        cursor.execute("""
            SELECT column_name, data_type, column_default, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'portfolio_assets'
            ORDER BY ordinal_position
        """)
        
        columns = cursor.fetchall()
        if columns:
            print(f"üìã Estrutura da tabela portfolio_assets ({len(columns)} colunas):")
            for col in columns:
                nullable = "NULL" if col[3] == "YES" else "NOT NULL"
                default = f"DEFAULT {col[2]}" if col[2] else ""
                print(f"   - {col[0]} ({col[1]}) {nullable} {default}")
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar tabelas: {e}")
        issues.append(f"Erro de conex√£o: {e}")
    
    # 3. Verificar se o problema √© no response da API
    print("\nüîç POSS√çVEIS CAUSAS DO ERRO 'Erro de conex√£o':")
    print("1. SQL executa mas conn.commit() falha")
    print("2. Resposta JSON malformada")
    print("3. Exce√ß√£o n√£o capturada ap√≥s o SQL")
    print("4. Timeout na conex√£o")
    print("5. Conflito entre tabelas recommendations")
    
    if issues:
        print(f"\n‚ùå Problemas encontrados: {len(issues)}")
        for i, issue in enumerate(issues, 1):
            print(f"{i}. {issue}")
    else:
        print("\n‚úÖ Nenhum problema √≥bvio encontrado")
    
    return len(issues) == 0

def simulate_exact_frontend_request():
    """Simular exatamente a requisi√ß√£o que vem do frontend"""
    
    print("\nüåê SIMULANDO REQUISI√á√ÉO EXATA DO FRONTEND...")
    print("=" * 50)
    
    # Esta √© a requisi√ß√£o que o JavaScript est√° fazendo
    request_data = {
        "portfolio": "smart_bdr",
        "ticker": "WEGE3",
        "weight": 25.0,
        "sector": "Industrial",
        "entry_price": 35.50,
        "current_price": 42.30,
        "target_price": 50.00,
        "entry_date": "2024-01-15"
    }
    
    print("üì§ Dados da requisi√ß√£o:")
    print(json.dumps(request_data, indent=2))
    
    try:
        # Conectar como a API faz
        database_url = os.environ.get("DATABASE_URL")
        
        if database_url:
            conn = psycopg2.connect(database_url, sslmode='require')
        else:
            conn = psycopg2.connect(
                host=os.environ.get("DB_HOST", "localhost"),
                database=os.environ.get("DB_NAME", "postgres"),
                user=os.environ.get("DB_USER", "postgres"),
                password=os.environ.get("DB_PASSWORD", "#geminii"),
                port=os.environ.get("DB_PORT", "5432")
            )
        
        cursor = conn.cursor()
        
        # Valida√ß√µes como na API
        portfolio = request_data.get('portfolio')
        ticker = request_data.get('ticker', '').upper()
        weight = request_data.get('weight')
        sector = request_data.get('sector', '').strip()
        entry_price = request_data.get('entry_price')
        current_price = request_data.get('current_price')
        target_price = request_data.get('target_price')
        entry_date = request_data.get('entry_date')
        
        print(f"\nüîç Valida√ß√µes:")
        print(f"   Portfolio: {portfolio}")
        print(f"   Ticker: {ticker}")
        print(f"   Weight: {weight} ({type(weight)})")
        print(f"   Sector: {sector}")
        print(f"   Entry Price: {entry_price} ({type(entry_price)})")
        print(f"   Current Price: {current_price} ({type(current_price)})")
        print(f"   Target Price: {target_price} ({type(target_price)})")
        print(f"   Entry Date: {entry_date}")
        
        # Verificar se todos os campos obrigat√≥rios est√£o presentes
        required = [portfolio, ticker, weight, sector, entry_price, target_price, entry_date]
        missing = []
        
        for i, field in enumerate(['portfolio', 'ticker', 'weight', 'sector', 'entry_price', 'target_price', 'entry_date']):
            if not required[i]:
                missing.append(field)
        
        if missing:
            print(f"‚ùå Campos obrigat√≥rios faltando: {missing}")
            return False
        
        # Verificar peso
        if weight < 0 or weight > 100:
            print(f"‚ùå Peso inv√°lido: {weight} (deve estar entre 0 e 100)")
            return False
        
        print("‚úÖ Todas as valida√ß√µes passaram")
        
        # Verificar se ativo j√° existe
        cursor.execute("""
            SELECT id FROM portfolio_assets 
            WHERE portfolio_name = %s AND ticker = %s
        """, (portfolio, ticker))
        
        existing = cursor.fetchone()
        if existing:
            print(f"‚ùå Ativo {ticker} j√° existe na carteira {portfolio} (ID: {existing[0]})")
            return False
        
        print("‚úÖ Ativo n√£o existe - pode inserir")
        
        # Executar INSERT exatamente como na API
        print("\nüíæ Executando INSERT...")
        
        cursor.execute("""
            INSERT INTO portfolio_assets 
            (portfolio_name, ticker, weight, sector, entry_price, current_price, target_price, entry_date)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            RETURNING id
        """, (
            portfolio, 
            ticker, 
            float(weight), 
            sector, 
            float(entry_price) if entry_price else None,
            float(current_price) if current_price else None, 
            float(target_price) if target_price else None, 
            entry_date
        ))
        
        asset_id = cursor.fetchone()[0]
        print(f"‚úÖ SQL executado! ID: {asset_id}")
        
        # COMMIT
        conn.commit()
        print("‚úÖ COMMIT executado")
        
        # Simular response
        response = {
            'success': True,
            'message': f'Ativo {ticker} adicionado √† carteira {portfolio} com sucesso!'
        }
        
        print(f"\nüì® Response simulado:")
        print(json.dumps(response, indent=2))
        
        # Limpeza
        cursor.execute("DELETE FROM portfolio_assets WHERE id = %s", (asset_id,))
        conn.commit()
        print("üßπ Ativo de teste removido")
        
        cursor.close()
        conn.close()
        
        print("\nüéâ SIMULA√á√ÉO COMPLETA - TUDO FUNCIONOU!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERRO na simula√ß√£o: {e}")
        print(f"üîç Tipo: {type(e).__name__}")
        
        # Informa√ß√µes extras sobre o erro
        import traceback
        print(f"üìã Traceback completo:")
        traceback.print_exc()
        
        return False

if __name__ == "__main__":
    print("üöÄ TESTE ESPEC√çFICO - INSER√á√ÉO DE ATIVOS")
    print("üéØ Identifica exatamente onde est√° falhando")
    print()
    
    # Menu de testes
    tests = [
        ("1", "Testar fluxo completo da API", test_exact_api_flow),
        ("2", "Verificar tabela de recomenda√ß√µes", test_recommendations_table), 
        ("3", "Testar persist√™ncia da conex√£o", test_connection_persistence),
        ("4", "Verificar padr√µes de erro", check_api_error_patterns),
        ("5", "Simular requisi√ß√£o do frontend", simulate_exact_frontend_request),
        ("0", "Executar todos os testes", None)
    ]
    
    print("Escolha o teste:")
    for option, description, _ in tests:
        print(f"{option}. {description}")
    
    choice = input("\nDigite o n√∫mero do teste: ").strip()
    
    if choice == "0":
        print("\nüîÑ EXECUTANDO TODOS OS TESTES...\n")
        all_passed = True
        
        for _, description, test_func in tests[:-1]:  # Pular o "todos os testes"
            print(f"\n{'='*60}")
            print(f"üß™ {description.upper()}")
            print(f"{'='*60}")
            
            if test_func:
                try:
                    result = test_func()
                    if not result:
                        all_passed = False
                except Exception as e:
                    print(f"‚ùå Erro no teste: {e}")
                    all_passed = False
        
        print(f"\n{'='*60}")
        print(f"üìä RESULTADO FINAL: {'‚úÖ TODOS OS TESTES PASSARAM' if all_passed else '‚ùå ALGUNS TESTES FALHARAM'}")
        print(f"{'='*60}")
        
    else:
        # Executar teste espec√≠fico
        test_found = False
        for option, description, test_func in tests:
            if option == choice and test_func:
                print(f"\nüß™ Executando: {description}")
                print("="*50)
                try:
                    result = test_func()
                    print(f"\nüèÅ Resultado: {'‚úÖ SUCESSO' if result else '‚ùå FALHOU'}")
                except Exception as e:
                    print(f"\n‚ùå Erro durante o teste: {e}")
                    import traceback
                    traceback.print_exc()
                test_found = True
                break
        
        if not test_found:
            print("‚ùå Op√ß√£o inv√°lida!")
    
    print(f"\nüí° DICA: Se SQL executa mas frontend d√° erro de conex√£o:")
    print("   1. Verificar se response JSON est√° correto")
    print("   2. Verificar se n√£o h√° exce√ß√£o ap√≥s commit")
    print("   3. Verificar logs do servidor em tempo real")
    print("   4. Testar rota direto no Postman")
    print("\nüéØ Execute este script para identificar o problema exato!")